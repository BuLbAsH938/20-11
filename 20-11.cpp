#include <iostream>
#include <ctime>
using namespace std;
/*Proc16.Описать функцию Sign(X) целого типа, возвращающую для вещественного числа X следующие значения :
−1, если X < 0;
0, если X = 0; 
1, если X > 0.
С помощью этой функции найти значение выражения Sign(A) + Sign(B)
для данных вещественных чисел A и B.
int sign(double x) {
	if (x < 0) return -1;
	if (x == 0) return 0;
	if (x > 0) return 1;
}
int main() {
	double a, b;
	cin >> a >> b;
	cout << sign(a) + sign(b);
		return 0;
}
Proc18.Описать функцию CircleS(R) вещественного типа, находящую площадь круга радиуса R(R — вещественное).С помощью этой функции
найти площади трех кругов с данными радиусами.Площадь круга радиуса R вычисляется по формуле S = π·R2 
.В качестве значения π использовать 3.14.
double CircleS(double R) {
	return 3.14 * R * R;
}
int main() {
	double R;
	for (int i = 1; i <= 3; i++) {
		cin >> R;
		cout << CircleS(R) << endl;
	}
}
Proc19. Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя окружностями с общим центром
и радиусами R1 и R2 (R1 и R2 — вещественные, R1 > R2). С ее помощью
найти площади трех колец, для которых даны внешние и внутренние радиусы. Воспользоваться формулой площади круга радиуса R: S = π·R
2. В качестве значения π использовать 3.14.
double RingS(double R1, double R2) {
	return 3.14 * ((R1 * R1) - (R2 * R2));
}
int main() {
	double R, R2;
	for (int i = 1; i <= 3; i++) {
		cin >> R >> R2;
		cout << RingS(R, R2) << endl;
	}
}
Proc20.Описать функцию TriangleP(a, h), находящую периметр равнобедренного треугольника по его основанию a и высоте h, проведенной к
основанию(a и h — вещественные).С помощью этой функции найти
периметры трех треугольников, для которых даны основания и высоты.
Для нахождения боковой стороны b треугольника использовать теорему
Пифагора :b 2 = (a / 2)2 + h2
double Triangle(double a,double h) {
	double b2 = ((a / 2) * (a / 2)) + h * h;
	return b2 + b2 + a;
}
int main() {
	double a, h;
	for (int i = 1; i <= 3; i++) {
		cin >> a >> h;
		cout << Triangle(a, h) << endl;
	}
}
Proc21◦
.Описать функцию SumRange(A, B) целого типа, находящую сумму
всех целых чисел от A до B включительно(A и B — целые).Если A > B,
то функция возвращает 0. С помощью этой функции найти суммы чисел
от A до B и от B до C, если даны числа A, B, C.
int SumRange(int A, int B) {
	int k = 0;
	if (A > B) return 0;
	for (int i = A; i <= B; i++) {
		k += i;
}
	return k;
}
int main() {
	int A, B, C;
	cin >> A >> B >> C;
	cout << SumRange(A, B) << endl;
	cout << SumRange(B, C);
}
Proc22.Описать функцию Calc(A, B, Op) вещественного типа, выполняющую
над ненулевыми вещественными числами A и B одну из арифметических
операций и возвращающую ее результат.Вид операции определяется целым параметром Op : 1 — вычитание, 2 — умножение, 3 — деление, остальные значения — сложение.С помощью Calc выполнить для данных A и B
операции, определяемые данными целыми N1, N2, N3.
float Calc(double a, double b, int Op) {
	switch (Op) {
	case 1: return a - b; break;
	case 2: return a * b; break;
	case 3: return a / b; break;
	default: return a + b; break;

	}
          
}
int main() {
	double A, B;
	int Op;
	for (int i = 1; i <= 3; i++) {
		cin >> A >> B >> Op;
		cout << Calc(A, B, Op) << endl;
	}
}
Proc23.Описать функцию Quarter(x, y) целого типа, определяющую номер
координатной четверти, в которой находится точка с ненулевыми вещественными координатами(x, y).С помощью этой функции найти номера
координатных четвертей для трех точек с данными ненулевыми координатами.*/
int Quarter(int x, int y) {
	if (0 < x && 0 < y) {
		return 1;
	}
	if (0 > x && 0 > y) {
		return 3;
	}
	if (0 > x && 0 < y) {
		return 2;
	}
	if (0 < x && 0 > y) {
		return 4;
	}
}
int main() {
	int x, y;
	for (int i = 1; i <= 3; i++) {
		cin >> x >> y;
		cout << Quarter(x, y) << endl;
	}
}
